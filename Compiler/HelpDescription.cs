using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Compiler
{
    public class HelpDescription
    {
        public Dictionary<string, string> description = new Dictionary<string, string>
        {
            {"Справка", "Добро пожаловать в окно справки, для получения информации выберите интересующий вас раздел." },

            {"О программе", "Данная программа предназначена для демонстрации логического программирования." +
                " В ней Вы можете писать логические программы на языке программирования ZaHaR 2.0. Подробнее" +
                " о языке вы можете прочитать в блоке “О языке ZaHaR 2.0”."},

            {"О языке \"ZaHaR 2.0\"", "Блоки данного раздела описывают логический язык программирования ZaHaR 2.0" },

            {"Основная информация", "Язык программирования ZaHaR 2.0 разработан специально для данной программы." +
                " На этом языке вы можете реализовывать программы, которые будут выполнять простые логические функции, а именно:" +
                "\n •	И" +
                "\n •	ИЛИ" +
                "\n •	НЕ" +
                "\n •	РАВНО \n" +
                "Помимо этого, в языке присутствуют функции для написания циклов, ввода и вывода информации." },

            {"Компиляция", "Данная программа обрабатывает программу на ошибки разного вида. После чего выводит" +
                " сообщение с точной датой и временем о успешной или неуспешной компиляции программы. В случае" +
                " неуспешной компиляции, программа выводит код ошибки, её название и место, где встретилась ошибка. " },

            {"Синтаксис", "Программа на языке “ZaHaR 2.0” должна содержать в себе var, begin, end. Без этих лексем Ваша программа не будет компилироваться." +
                " После лексемы var пишутся названия переменных, название которых должно содержать набор символов из определенного перечня. Количество " +
                "символов не может превышать 12. Затем ставиться двоеточие и пишется тип переменных, а именно – logical. "+
                "Далее идет раздел основного блока программы, который начинается с begin и заканчивается end. " +
                "Словарь символов представлен символами VA = {A-z, «.», «_», «,», «(» , «)», «:», «;» } "+
                "    Основными командами, которые можно использовать в этом блоке: "+
                "\n•	and() – логическое И" +
                "\n•	or() – логическое ИЛИ"+
                "\n•	repeat … until() – оператор для цикла(Повторять* блок кода* пока не.В скобках указывается условие, при котором цикл завершается"+
                "\n•	not () – логическое НЕ "+
                "\n•	equ () – логическое равно "+
                "\n•	write () – оператор для вывода результата логического выражения или переменной"+
                "\n•	read () – оператор позволяет считывать переменные, вводимые с клавиатуры"+
                "\nКаждая функция (кроме var, begin, repeat, end) должна заканчиваться знаком “;”."+
                "Если вы задаетесь вопросом, почему в таком продвинутом языке нет комментариев? Ответ: мы считаем, что код необходимо писать простым, "+
                "чтобы каждый мог его прочитать и не писать много строчек с пояснением." },

            {"Работа с данными", "В данной программе работа происходит только с логическим типом данных. " +
                "Программы можно загружать и сохранять в текстовом формате (txt). Делается это в верхнем левом углу с помощью раздела «Файл» "+
            "Сами данные можно как писать в самом языке, так и вводить с клавиатуры. Результат отображается в окне вывода, которое расположено внизу." },

            {"Запуск", "Запуск и исполнение программы осуществляет виртуальная машина, " +
                "исполняющая транслированный код из файла формата zhr." },
        };
    }
}
