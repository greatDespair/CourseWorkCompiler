@page
@model DescriptionModel
@{
    ViewData["Title"] = "Description";
}
<div class="mainFrame">
    <h1>Справка по логическому языку "ZaHaR 2.0"</h1>
    <div class="descriptionMainBlock">
        <label class="descriptionTextStyle"></label>
        <h2>  О сервис</h2>
        <label class="descriptionTextStyle">Данный онлайн сервис предназначен для демонстрации логического программирования. 
            В нем Вы можете писать логические программы на языке программирования ZaHaR 2.0. Подробнее о языке
            вы можете прочитать в блоке “О языке ZaHaR 2.0”.</label><br />
        <h2>  Основная информация </h2>
        <label class="descriptionTextStyle">Язык программирования ZaHaR 2.0 разработан специально для данной программы. 
            На этом языке вы можете реализовывать программы, которые будут выполнять простые логические функции, а именно:</label><br />
        <ul class="descriptionTextStyle">
            <li>И</li>
            <li>ИЛИ</li>
            <li>НЕ</li>
            <li>РАВНО</li>
        </ul>
        <label class="descriptionTextStyle">Помимо этого, в языке присутствуют функции для написания циклов, ввода и вывода информации.</label><br />
        <h2>  Синтаксис</h2>
        <label class="descriptionTextStyle">Программа на языке “ZaHaR 2.0” должна содержать в себе var, begin, end. 
            Без этих лексем Ваша программа не будет компилироваться. После лексемы var пишутся названия переменных,
            название которых должно содержать набор символов из определенного перечня. Количество символов не может
            превышать 12. Затем ставиться двоеточие и пишется тип переменных, а именно – logical. </label><br />
        <label class="descriptionTextStyle">Далее идет раздел основного блока программы, который начинается с begin и заканчивается end.</label><br />
        <label class="descriptionTextStyle">Словарь символов представлен символами VA = {A-z, «.», «_», «,», «(» , «)», «:», «;» }</label><br />
        <label class="descriptionTextStyle">Основными командами, которые можно использовать в этом блоке:</label><br />
        <ul class="descriptionTextStyle">
            <li>and () – логическое И</li>
            <li>or () – логическое ИЛИ</li>
            <li>repeat … until () – оператор для цикла (Повторять *блок кода* пока не. В скобках указывается условие,
                при котором цикл завершается</li>
            <li>not () – логическое НЕ</li>
            <li>equ () – логическое равно</li>
            <li>write () – оператор для вывода результата логического выражения или переменной</li>
            <li>read () – оператор позволяет считывать переменные, вводимые с клавиатуры</li>
        </ul>
        <label class="descriptionTextStyle">Каждая функция (кроме var, begin, repeat, end) должна заканчиваться знаком “;”.</label><br />
        <label class="descriptionTextStyle">	Если вы задаетесь вопросом, почему в таком продвинутом языке нет комментариев?
            Ответ: мы считаем, что код необходимо писать простым, чтобы каждый мог его прочитать и не писать много
            строчек с пояснением.</label><br />
        <h2>  Компиляция </h2>
        <label class="descriptionTextStyle">Данная программа обрабатывает программу на ошибки разного вида. После чего выводит
            сообщение с точной датой и временем о успешной или неуспешной компиляции программы. В случае неуспешной
            компиляции, программа выводит код ошибки, её название и место, где встретилась ошибка. </label><br />
        <h2>  Ошибки и их коды</h2>
        <label class="descriptionTextStyle">Ошибки компиляции представляют из себя краткие сообщения, сообщающие информацию о
            всех пройденных этапах анализа и сборки.</label><br />
        <label class="descriptionTextStyle">Всего в сборке имеется 4 формата ошибок</label><br />
        <ul class="descriptionTextStyle">
            <li>CODE X0;</li>
            <li>CODE X1;</li>
            <li>CODE X2;</li>
            <li>Ошибка неизвестного и общего форматов;</li>
        </ul>
        <label class="descriptionTextStyle">В свою очередь ошибки типа CODE X0 и X1 отвечают за ошибки на этапе лексического
            и синтаксического анализа соответственно. Вторая цифра кода является порядковым номером соответствующей
            ошибки. Ошибка типа CODE X2 возникает в ходе транслирования кода в машинный, а также в ходе исполнения 
            виртуальной машины. Данная ошибка связана с неправильным использованием данных и ресурсов в программе, 
            включая ошибки с использованием переменных.</label><br />
        <label class="descriptionTextStyle">При успешной компиляции программы, код преобразовывается в машинный, записывается 
            в файл, чтобы работать с ним далее, и выводит результат.</label><br />
    </div>
    <div class = "text-center">
    <button class = "buttonStyle" onclick="document.location='../'">На главную</button>
    </div>
</div>